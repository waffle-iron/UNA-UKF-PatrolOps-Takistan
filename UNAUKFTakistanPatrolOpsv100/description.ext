class Header {
	maxPlayers = 38;	// <!-- CHANGE Where the number is the total playable slots
	minPlayers = 1;
	gameType = COOP;
};


/* Defines the loading screen */
overviewPicture = "data\UNA_logo.paa";
author = "[UNA]EchoTwoZero";
onLoadName = "[UNA] Ops Alive Takistan";
onLoadMission = "Patrol Operations originally by RoyEightysix.<br/> Edited for U.N.A. by [UNA]EchoTwoZero<br/>Version 1.00";
loadScreen = "data\UNA_presents.paa";
overviewText = "Patrol Operations originally by RoyEightysix. Edited for [UNA] by EchoTwoZero";


#include "data\dialogs.hpp"
//#include "scripts\keg_spectate\dialog.hpp"
//#include "scripts\VAS\VASdialogs.hpp"

/* GUI config */
#include "scripts\GUIDefines\Defines.hpp"
/* RscMapControl config */
#include "scripts\GUIDefines\RscMapControl.hpp"
/* Radio Channel Selection GUI config */
#include "scripts\RadioChannels\RadioChannelGUI.hpp"

/* Disabled in favour of BEAR's script */
#include "scripts\TOUR_FieldRadio\TOUR_FieldRadio.hpp"

DisabledAI		= 1;			// <!-- Where 0 Fills empty playable slots with AI, 1 is They Don't fill the empty slots
joinUnassigned	= 1;		// <!-- Where 0 forces joining players into the first empty slot, 1 leaves them to select their own


/*
Specifies the respawn type:
0 or "NONE" = No respawn.
1 or "BIRD" = Respawn as a seagull.
2 or "INSTANT" = Respawn where you died.
3 or "BASE" = Respawn in base.
4 or "GROUP" = Respawn in AI from your group or seagull if no AI.
5 or "SIDE" = Respawn in AI from your side or seagull if no AI.
*/
respawn = 3;
/* Determines how long in seconds the respawn timer is. */
respawndelay = 30;
/* Show the scoreboard and respawn countdown timer for a player if he is killed with respawnType 3. */
RespawnDialog = 0;
//respawnTemplates[] = {"MenuPosition"};
respawnOnStart = 0;



/* Disabled For BEAR's Script */
//disableChannels[]	={0,6};	// <!-- Restrict chat channels where (0=Global),(1=Side),(2=Command),(3=Group),(4=Vehicle),(5=Direct),(6=System)

enableDebugConsole	= 1;		// <!-- Enable the debug console where (0=disabled),(1=Admins Only),(2=Everyone) DO NOT SET AS 2!
showGPS			= 1;			// <!-- Allow GPS
showCompass		= 1;			// <!-- Allow Compass
showWatch		= 1;			// <!-- Allow Watch
/* Disables the option to save the mission. */
saving = 0;

/* Force RotorLib (Advanced Helicopters) */
forceRotorLibSimulation = 1;

class RscTitles
{
	/* Add DFS recognize */
//	#include "ais_injury\dialogs\rscTitlesAIS.hpp"
	#include "data\rscTitles.hpp"
};



class CfgDebriefing {
	#include "data\cfgDebriefing.hpp"
};
class CfgFunctions {
	#include "data\cfgFunctions.hpp"
//	#include "scripts\VAS\VAScfgFunctions.hpp"
//	#include "ais_injury\cfgFunctionsAIS.hpp"
};
class CfgNotifications {
	#include "data\cfgNotifications.hpp"
};
class Params {
	#include "data\params.hpp"
	
		class Daytime
	{
		title = "Start Time";
		texts[] = {"00:00","01:00","02:00","03:00","04:00","05:00","06:00", "07:00","08:00","09:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","20:00","21:00","22:00","23:00"};
		values[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
		default = 8;
		function = "BIS_fnc_paramDaytime"; // (Optional) Function called when player joins, selected value is passed as an argument
 		isGlobal = 1; // (Optional) 1 to execute script / function locally for every player who joins, 0 to do it only on server
	};
	
	
		/* Settings for initial weather */
	class InitialWeather
	{
		title = "Initial weather:";
		values[] = {0,1,2,3,4,5,6,7,8,9,10};
		texts[] = {"Clear","Clear with light wind","Clear with strong wind","Overcast","Light Rain","Medium Rain","Thunderstorms","Light Fog","Medium Fog","Heavy Fog","Random"};
		default = 0;
	};

	/* Settings for speeding up time */
	class TimeMultiplier
	{
		title = "Time multiplier:";
		values[] = {0,1,2,3,4,5,6};
		texts[] = {"x0.5","x1","x2","x3","x4","x5","x6"};
		default = 1;
	};
	
	
	class ACE_Options {
	title = "====== ACE Options ======";
	values[]= {0};
	texts[]= {" "};
	default = 0;
	code = "";
};
	
	class ace_medical_level { //This needs to match an ace_setting, this one is a "SCALAR"(number)
        title = "Medical Level"; // Name that is shown
        ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
        values[] = {1, 2}; //Values that ace_medical_level can be set to
        texts[] =  {"Basic", "Advanced"}; //Text names to show for values (Basic will set level to 1, Advanced will set level to 2)
        default = 1; //Default value used - Value should be in the values[] list
    };
	
	class ace_medical_enableAdvancedWounds { //This needs to match an ace_setting, this one is a "SCALAR"(number)
        title = "Advanced Wounds"; // Name that is shown
        ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
        values[] = {0, 1}; //Values that ace_medical_level can be set to
        texts[] =  {"Basic", "Advanced"}; //Text names to show for values (Basic will set level to 1, Advanced will set level to 2)
        default = 0; //Default value used - Value should be in the values[] list
    };
	
	
	class ace_medical_enableUnconsciousnessAI { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Allow Unconscious AI"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0, 1, 2}; //Values that ace_medical_level can be set to
		texts[] = {"Off","50/50", "Enabled"}; //Text names to show for values (Off will be set level to 0, 50/50 will set level to 1)
		default = 0; //Default value used - Value should be in the values[] list
	};
	
	class ace_medical_preventInstaDeath { //This needs to match an ace_setting, this one is a "BOOL"
		title = "Prevent Instant Death - Won't allow death"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0, 1}; //Values that ace_medical_level can be set to
		texts[] = {"No","Yes"}; //Text names to show for values (No will be set level to 0, Yes will set level to 1)
		default = 0; //Default value used - Value should be in the values[] list
	};
	
	class ace_medical_enableRevive { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Enable Reviving"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0, 1, 2}; //Values that ace_medical_level can be set to
		texts[] = {"Off","Players Only", "Players and AI"}; //Text names to show for values (No will be set level to 0, Yes will set level to 1)
		default = 1; //Default value used - Value should be in the values[] list
	};

	class ace_medical_maxReviveTime { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Maximum Revive Time"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {10,300, 600, 900, 1200, 1500, 1800, 3600}; //Values that ace_medical_level can be set to
		texts[] = {"10","300", "600", "900", "1200", "1500", "1800", "3600"}; //Text names to show for values (No will be set level to 0, Yes will set level to 1)
		default = 3600; //Default value used - Value should be in the values[] list
	};
	
	class ace_medical_allowDeadBodyMovement { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Allow Movement of Dead Bodies"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {false,true}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"False", "True"}; //Text names to show
		default = true; //Default value used
	};
	
	class ace_medical_medicSetting_basicEpi { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Allow Epinephrine"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1,2}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anyone","Medics Only","Doctors Only"}; //Text names to show
		default = 1; //Default value used
	};
		
	class ace_medical_medicSetting_PAK { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Allow PAK"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1,2}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anyone","Medics Only","Doctors Only"}; //Text names to show
		default = 1; //Default value used
	};
		
	class ace_medical_medicSetting_SurgicalKit { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Allow Surgical Kit"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1,2}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anyone","Medics Only","Doctors Only"}; //Text names to show
		default = 1; //Default value used
	};
		
	class ace_medical_useLocation_basicEpi { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Locations for Epinephrine"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1,2,3,4}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anywhere","Medical Vehicles","Medical Facilities","Vehicles & Facilities","Disabled"}; //Text names to show
		default = 0; //Default value used
	};
	
	class ace_medical_useLocation_PAK { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Locations for PAK"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1,2,3,4}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anywhere","Medical Vehicles","Medical Facilities","Vehicles & Facilities","Disabled"}; //Text names to show
		default = 0; //Default value used
	};
	
	class ace_medical_useLocation_SurgicalKit { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Locations for Surgical Kit"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1,2,3,4}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anywhere","Medical Vehicles","Medical Facilities","Vehicles & Facilities","Disabled"}; //Text names to show
		default = 0; //Default value used
	};

	class ace_medical_useCondition_PAK { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Condition Required for PAK"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anytime","Stable"}; //Text names to show
		default = 1; //Default value used
	};
	
	class ace_medical_useCondition_SurgicalKit { //This needs to match an ace_setting, this one is a "SCALAR"(number)
		title = "Condition Required for Surgical Kit"; //Name that is shown
		ACE_setting = 1; //Marks param to be read as an ace setting, without this nothing will happen!
		values[] = {0,1}; //Values that ace_medical_allowDeadBodyMovement can be set to
		texts[] = {"Anytime","Stable"}; //Text names to show
		default = 1; //Default value used
	};
	
	
	

	
};

